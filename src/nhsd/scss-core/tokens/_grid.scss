// Built in modules
@use "sass:map";

// Settings
@use "scss-core/settings/vars";
@use "scss-core/settings/media-queries" as *;

// Tokens
@use "scss-core/tokens/colours" as nhsd-colours;
@use "scss-core/tokens/utils" as nhsd-utils;

// Private members
$-root: ".nhsd-t";

// Breakpoint data
$-grid-data-map: (
  xs: (
    prefix: xs,
    columns: 12,
    breakpoints: (
      until: s
    )
  ),
  s: (
    prefix: s,
    columns: 12,
    breakpoints: (
      from: s
    )
  ),
  m: (
    prefix: m,
    columns: 12,
    breakpoints: (
      from: m
    )
  ),
  l: (
    prefix: l,
    columns: 12,
    breakpoints: (
      from: l
    )
  ),
  xl: (
    prefix: xl,
    columns: 12,
    breakpoints: (
      from: xl
    )
  )
);

// Public members
// =========================================================
// Variables
// =========================================================

$gutter: vars.$gutter;
$small-gutter: vars.$small-gutter;

// Private members
%-column-base {
  width: 100%;
  padding: 0 $gutter;
  align-content: stretch;
  flex: 0 1 auto;
}

// Public members
// =========================================================
// Utility classes
// =========================================================

#{$-root} {
  &-grid {
    @include nhsd-utils.box-sizing;
    display: block;
    width: 100%;
    max-width: map.get(vars.$content-width, "xs");
    margin: 0 auto;
    padding: 0 $gutter;

    &--full-width {
      max-width: 100%;
      padding-right: 0;
      padding-left: 0;
    }

    @include mq($until: s) {
      padding: 0 $small-gutter;

      [class^="nhsd-t-col"] {
        padding-right: $small-gutter;
        padding-left: $small-gutter;
      }
    }

    &--nested {
      padding: 0;

      .nhsd-t-row {
        margin-right: -$gutter;
        margin-left: -$gutter;

        @include mq($until: s) {
          margin-right: -$small-gutter;
          margin-left: -$small-gutter;
        }
      }
    }

    &:not(&--full-width) {
      @each $-breakpoint, $-props in $-grid-data-map {
        @include mq($from: $-breakpoint) {
          max-width: map.get(vars.$content-width, $-breakpoint);
        }
      }
    }

    // Better grid visibility in demo
    &--debug {
      #{$-root}-row {
        background: nhsd-colours.get("yellow-10-tint");
      }

      [class^="nhsd-t-col"] {
        padding-top: 1rem;
        padding-bottom: 1rem;
        background: nhsd-colours.get("mid-grey-20-tint");
        box-shadow: inset 0 0 0 .5px nhsd-colours.get("mid-grey");
        font-size: .65rem;
      }

      // stylelint-disable declaration-no-important
      @include mq($until: s) {
        #{$-root}-col-xs-6:nth-child(2n+1):not(#{$-root}-off-xs-6) {
          background: nhsd-colours.get("green") !important;

          & + #{$-root}-col-xs-6 {
            background: nhsd-colours.get("red") !important;
          }
        }
      }
      // stylelint-enable declaration-no-important
    }
  }

  // Basic row
  &-row {
    display: flex;
    flex-wrap: wrap;

    &--centred {
      justify-content: center;
    }
  }

  // Basic column
  &-col {
    @extend %-column-base;
  }

  // Columns and offsets for all breakpoints
  @each $-device, $-props in $-grid-data-map {
    $-prefix: map.get($-props, "prefix");
    $-columns: map.get($-props, "columns");
    $-breakpoints: map.get($-props, "breakpoints");

    $-bp-from: map.get($-breakpoints, "from");
    $-bp-until: map.get($-breakpoints, "until");

    @for $-step from 0 through $-columns {
      // Static
      @if $-device == "m" {
        &-col-#{$-step} {
          @extend %-column-base;
          width: $-step / $-columns * 100%;
        }

        &-off-#{$-step} {
          margin-left: $-step / $-columns * 100%;
        }
      }

      // Responsive
      @include mq($from: $-bp-from, $until: $-bp-until) {
        &-col-#{$-prefix}-#{$-step} {
          width: $-step / $-columns * 100%;
        }

        &-off-#{$-prefix}-#{$-step} {
          margin-left: $-step / $-columns * 100%;
        }
      }

      &-col-#{$-prefix}-#{$-step} {
        @extend %-column-base;
      }
    }
  }
}

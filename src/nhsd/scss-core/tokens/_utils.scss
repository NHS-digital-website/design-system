// stylelint-disable declaration-no-important

// Built in modules
@use "sass:map";

// Settings
@use "scss-core/settings/vars";
@use "scss-core/settings/media-queries" as *;

// Tokens
@use "scss-core/tokens/colours" as nhsd-colours;
@use "scss-core/tokens/fonts";

// Private members
$-root: ".nhsd-";

$-directions: (
  left: left,
  center: center,
  right: right
);

$-responsive-data-map: (
  xs: (
    prefix: xs,
    breakpoints: (
      until: s
    )
  ),
  s: (
    prefix: s,
    breakpoints: (
      from: s,
      until: m
    )
  ),
  m: (
    prefix: m,
    breakpoints: (
      from: m,
      until: l
    )
  ),
  l: (
    prefix: l,
    breakpoints: (
      from: l,
      until: xl
    )
  ),
  xl: (
    prefix: xl,
    breakpoints: (
      from: xl
    )
  )
);

// =========================================================
// Functions and mixins
// =========================================================

@function px-to-rem($px) {
  @if $px != null {
    @return if($px == 0, 0, ($px / fonts.$base-font-size) * 1rem);
  }
  @return null;
}

@mixin text-align($key: left, $override: false) {
  $value: map.get($-directions, $key);
  @if $value == null {
    $value: map.get($-directions, left);
  }
  text-align: $value if($override == true, !important, null);
}

@mixin box-sizing($value: border-box) {
  &,
  &:before,
  &:after {
    box-sizing: $value;
  }
}

@mixin clamped-text($lines: 4) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  -webkit-box-pack: end;
}

@mixin light-text() {
  [class^="nhsd-t-heading"],
  [class^="nhsd-t-body"] {
    color: nhsd-colours.get("white");
  }

  [class^="nhsd-a-link"] {
    &:not(:hover):not(:focus),
    &:active {
      border-bottom: vars.$base-line-thickness solid nhsd-colours.get("white");
      color: nhsd-colours.get("white");
    }
  }

  .nhsd-a-icon {
    & > svg {
      fill: nhsd-colours.get("white");
    }
  }
}

@function grid-width($colWidth: 12, $breakpoint: xl, $withGutters: true) {
  $gutter-width: 0;
  @if $withGutters == true {
    $gutter-width: (vars.$gutter * 2);
  }
  @return #{((map.get(vars.$content-width, $breakpoint) - $gutter-width) / 12 * $colWidth) - $gutter-width};
}

// =========================================================
// Utility classes
// =========================================================

.nhsd-t-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.nhsd-t-scroll-lock {
  height: 100%;
  overflow: hidden;

  &-mobile {
    @include mq($until: m) {
      height: 100%;
      overflow: hidden;
    }
  }
}

// =========================================================
// Utility override classes
// =========================================================

#{$-root}\!t-no-gutters {
  padding-right: 0 !important;
  padding-left: 0 !important;
}

#{$-root}\!t-uppercase {
  text-transform: uppercase !important;
}

@each $key, $value in $-directions {
  // Override tokens
  #{$-root}\!t-text-align-#{$key} {
    @include text-align($value, true);
  }

  // Regular tokens
  #{$-root}\t-text-align-#{$key} {
    @include text-align($value);
  }

  // Responsive override tokens
  @each $-device, $-props in $-responsive-data-map {
    $-prefix: map.get($-props, "prefix");
    $-breakpoints: map.get($-props, "breakpoints");
    $-bp-from: map.get($-breakpoints, "from");
    $-bp-until: map.get($-breakpoints, "until");

    @include mq($from: $-bp-from, $until: $-bp-until) {
      #{$-root}\!t-text-align-#{$-prefix}-#{$key} {
        @include text-align($value, true);
      }
    }
  }
}

@mixin scrollbar {
  &::-webkit-scrollbar {
    -webkit-appearance: none;
    width: 8px;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 8px;
    background: nhsd-colours.get("mid-grey-20-tint");
  }
}

@mixin apply-shadow($size: 1) {
  box-shadow: #{.1111rem * $size} #{.3334rem * $size} #{.6667rem * $size} rgba(0, 0, 0, (.1 * $size));
}

// stylelint-enable declaration-no-important
